// Generated by jextract

package top.dreamlike.nativeLib.stdio;

import java.lang.foreign.Addressable;
import java.lang.foreign.MemoryAddress;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.*;

public class stdio_h {

    /* package-private */ stdio_h() {
    }

    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;

    public static int _STDIO_H() {
        return (int) 1L;
    }

    public static int _FEATURES_H() {
        return (int) 1L;
    }

    public static int _DEFAULT_SOURCE() {
        return (int) 1L;
    }

    public static int __GLIBC_USE_ISOC2X() {
        return (int) 0L;
    }

    public static int __USE_ISOC11() {
        return (int) 1L;
    }

    public static int __USE_ISOC99() {
        return (int) 1L;
    }

    public static int __USE_ISOC95() {
        return (int) 1L;
    }

    public static int __USE_POSIX_IMPLICITLY() {
        return (int) 1L;
    }

    public static int _POSIX_SOURCE() {
        return (int) 1L;
    }

    public static int __USE_POSIX() {
        return (int) 1L;
    }

    public static int __USE_POSIX2() {
        return (int) 1L;
    }

    public static int __USE_POSIX199309() {
        return (int) 1L;
    }

    public static int __USE_POSIX199506() {
        return (int) 1L;
    }

    public static int __USE_XOPEN2K() {
        return (int) 1L;
    }

    public static int __USE_XOPEN2K8() {
        return (int) 1L;
    }

    public static int _ATFILE_SOURCE() {
        return (int) 1L;
    }

    public static int __USE_MISC() {
        return (int) 1L;
    }

    public static int __USE_ATFILE() {
        return (int) 1L;
    }

    public static int __USE_FORTIFY_LEVEL() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int) 0L;
    }

    public static int _STDC_PREDEF_H() {
        return (int) 1L;
    }

    public static int __STDC_IEC_559__() {
        return (int) 1L;
    }

    public static int __STDC_IEC_559_COMPLEX__() {
        return (int) 1L;
    }

    public static int __GNU_LIBRARY__() {
        return (int) 6L;
    }

    public static int __GLIBC__() {
        return (int) 2L;
    }

    public static int __GLIBC_MINOR__() {
        return (int) 31L;
    }

    public static int _SYS_CDEFS_H() {
        return (int) 1L;
    }

    public static int __glibc_c99_flexarr_available() {
        return (int) 1L;
    }

    public static int __WORDSIZE() {
        return (int) 64L;
    }

    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int) 1L;
    }

    public static int __SYSCALL_WORDSIZE() {
        return (int) 64L;
    }

    public static int __LONG_DOUBLE_USES_FLOAT128() {
        return (int) 0L;
    }

    public static int __HAVE_GENERIC_SELECTION() {
        return (int) 1L;
    }

    public static int __GLIBC_USE_LIB_EXT2() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int) 0L;
    }

    public static int __GNUC_VA_LIST() {
        return (int) 1L;
    }

    public static int _BITS_TYPES_H() {
        return (int) 1L;
    }

    public static int _BITS_TYPESIZES_H() {
        return (int) 1L;
    }

    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int) 1L;
    }

    public static int __INO_T_MATCHES_INO64_T() {
        return (int) 1L;
    }

    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int) 1L;
    }

    public static int __STATFS_MATCHES_STATFS64() {
        return (int) 1L;
    }

    public static int __FD_SETSIZE() {
        return (int) 1024L;
    }

    public static int _BITS_TIME64_H() {
        return (int) 1L;
    }

    public static int _____fpos_t_defined() {
        return (int) 1L;
    }

    public static int ____mbstate_t_defined() {
        return (int) 1L;
    }

    public static int _____fpos64_t_defined() {
        return (int) 1L;
    }

    public static int ____FILE_defined() {
        return (int) 1L;
    }

    public static int __FILE_defined() {
        return (int) 1L;
    }

    public static int __struct_FILE_defined() {
        return (int) 1L;
    }

    public static int _IO_EOF_SEEN() {
        return (int) 16L;
    }

    public static int _IO_ERR_SEEN() {
        return (int) 32L;
    }

    public static int _IO_USER_LOCK() {
        return (int) 32768L;
    }

    public static int _IOFBF() {
        return (int) 0L;
    }

    public static int _IOLBF() {
        return (int) 1L;
    }

    public static int _IONBF() {
        return (int) 2L;
    }

    public static int BUFSIZ() {
        return (int) 8192L;
    }

    public static int SEEK_SET() {
        return (int) 0L;
    }

    public static int SEEK_CUR() {
        return (int) 1L;
    }

    public static int SEEK_END() {
        return (int) 2L;
    }

    public static int _BITS_STDIO_LIM_H() {
        return (int) 1L;
    }

    public static int L_tmpnam() {
        return (int) 20L;
    }

    public static int TMP_MAX() {
        return (int) 238328L;
    }

    public static int FILENAME_MAX() {
        return (int) 4096L;
    }

    public static int L_ctermid() {
        return (int) 9L;
    }

    public static int FOPEN_MAX() {
        return (int) 16L;
    }

    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;

    public static MemoryLayout stdin$LAYOUT() {
        return constants$0.stdin$LAYOUT;
    }

    public static VarHandle stdin$VH() {
        return constants$0.stdin$VH;
    }

    public static MemorySegment stdin$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.stdin$SEGMENT, "stdin");
    }

    public static MemoryAddress stdin$get() {
        return (java.lang.foreign.MemoryAddress) constants$0.stdin$VH.get(RuntimeHelper.requireNonNull(constants$0.stdin$SEGMENT, "stdin"));
    }

    public static void stdin$set(MemoryAddress x) {
        constants$0.stdin$VH.set(RuntimeHelper.requireNonNull(constants$0.stdin$SEGMENT, "stdin"), x);
    }

    public static MemoryLayout stdout$LAYOUT() {
        return constants$0.stdout$LAYOUT;
    }

    public static VarHandle stdout$VH() {
        return constants$0.stdout$VH;
    }

    public static MemorySegment stdout$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.stdout$SEGMENT, "stdout");
    }

    public static MemoryAddress stdout$get() {
        return (java.lang.foreign.MemoryAddress) constants$0.stdout$VH.get(RuntimeHelper.requireNonNull(constants$0.stdout$SEGMENT, "stdout"));
    }

    public static void stdout$set(MemoryAddress x) {
        constants$0.stdout$VH.set(RuntimeHelper.requireNonNull(constants$0.stdout$SEGMENT, "stdout"), x);
    }

    public static MemoryLayout stderr$LAYOUT() {
        return constants$0.stderr$LAYOUT;
    }

    public static VarHandle stderr$VH() {
        return constants$0.stderr$VH;
    }

    public static MemorySegment stderr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.stderr$SEGMENT, "stderr");
    }

    public static MemoryAddress stderr$get() {
        return (java.lang.foreign.MemoryAddress) constants$0.stderr$VH.get(RuntimeHelper.requireNonNull(constants$0.stderr$SEGMENT, "stderr"));
    }

    public static void stderr$set(MemoryAddress x) {
        constants$0.stderr$VH.set(RuntimeHelper.requireNonNull(constants$0.stderr$SEGMENT, "stderr"), x);
    }

    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$0.remove$MH, "remove");
    }

    public static int remove(Addressable __filename) {
        var mh$ = remove$MH();
        try {
            return (int) mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$0.rename$MH, "rename");
    }

    public static int rename(Addressable __old, Addressable __new) {
        var mh$ = rename$MH();
        try {
            return (int) mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.renameat$MH, "renameat");
    }

    public static int renameat(int __oldfd, Addressable __old, int __newfd, Addressable __new) {
        var mh$ = renameat$MH();
        try {
            return (int) mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$1.tmpfile$MH, "tmpfile");
    }

    public static MemoryAddress tmpfile() {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$1.tmpnam$MH, "tmpnam");
    }

    public static MemoryAddress tmpnam(Addressable __s) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tmpnam_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1.tmpnam_r$MH, "tmpnam_r");
    }

    public static MemoryAddress tmpnam_r(Addressable __s) {
        var mh$ = tmpnam_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$1.tempnam$MH, "tempnam");
    }

    public static MemoryAddress tempnam(Addressable __dir, Addressable __pfx) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fclose$MH, "fclose");
    }

    public static int fclose(Addressable __stream) {
        var mh$ = fclose$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fflush$MH, "fflush");
    }

    public static int fflush(Addressable __stream) {
        var mh$ = fflush$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fflush_unlocked$MH, "fflush_unlocked");
    }

    public static int fflush_unlocked(Addressable __stream) {
        var mh$ = fflush_unlocked$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fopen$MH, "fopen");
    }

    public static MemoryAddress fopen(Addressable __filename, Addressable __modes) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$2.freopen$MH, "freopen");
    }

    public static MemoryAddress freopen(Addressable __filename, Addressable __modes, Addressable __stream) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fdopen$MH, "fdopen");
    }

    public static MemoryAddress fdopen(int __fd, Addressable __modes) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fmemopen$MH, "fmemopen");
    }

    public static MemoryAddress fmemopen(Addressable __s, long __len, Addressable __modes) {
        var mh$ = fmemopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$2.open_memstream$MH, "open_memstream");
    }

    public static MemoryAddress open_memstream(Addressable __bufloc, Addressable __sizeloc) {
        var mh$ = open_memstream$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.setbuf$MH, "setbuf");
    }

    public static void setbuf(Addressable __stream, Addressable __buf) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.setvbuf$MH, "setvbuf");
    }

    public static int setvbuf(Addressable __stream, Addressable __buf, int __modes, long __n) {
        var mh$ = setvbuf$MH();
        try {
            return (int) mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.setbuffer$MH, "setbuffer");
    }

    public static void setbuffer(Addressable __stream, Addressable __buf, long __size) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.setlinebuf$MH, "setlinebuf");
    }

    public static void setlinebuf(Addressable __stream) {
        var mh$ = setlinebuf$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fprintf$MH, "fprintf");
    }

    public static int fprintf(Addressable __stream, Addressable __format, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int) mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.printf$MH, "printf");
    }

    public static int printf(Addressable __format, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int) mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.sprintf$MH, "sprintf");
    }

    public static int sprintf(Addressable __s, Addressable __format, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int) mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.vfprintf$MH, "vfprintf");
    }

    public static int vfprintf(Addressable __s, Addressable __format, Addressable __arg) {
        var mh$ = vfprintf$MH();
        try {
            return (int) mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.vprintf$MH, "vprintf");
    }

    public static int vprintf(Addressable __format, Addressable __arg) {
        var mh$ = vprintf$MH();
        try {
            return (int) mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.vsprintf$MH, "vsprintf");
    }

    public static int vsprintf(Addressable __s, Addressable __format, Addressable __arg) {
        var mh$ = vsprintf$MH();
        try {
            return (int) mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.snprintf$MH, "snprintf");
    }

    public static int snprintf(Addressable __s, long __maxlen, Addressable __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int) mh$.invokeExact(__s, __maxlen, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.vsnprintf$MH, "vsnprintf");
    }

    public static int vsnprintf(Addressable __s, long __maxlen, Addressable __format, Addressable __arg) {
        var mh$ = vsnprintf$MH();
        try {
            return (int) mh$.invokeExact(__s, __maxlen, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vdprintf$MH, "vdprintf");
    }

    public static int vdprintf(int __fd, Addressable __fmt, Addressable __arg) {
        var mh$ = vdprintf$MH();
        try {
            return (int) mh$.invokeExact(__fd, __fmt, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.dprintf$MH, "dprintf");
    }

    public static int dprintf(int __fd, Addressable __fmt, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int) mh$.invokeExact(__fd, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fscanf$MH, "fscanf");
    }

    public static int fscanf(Addressable __stream, Addressable __format, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int) mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.scanf$MH, "scanf");
    }

    public static int scanf(Addressable __format, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int) mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.sscanf$MH, "sscanf");
    }

    public static int sscanf(Addressable __s, Addressable __format, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int) mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vfscanf$MH, "vfscanf");
    }

    public static int vfscanf(Addressable __s, Addressable __format, Addressable __arg) {
        var mh$ = vfscanf$MH();
        try {
            return (int) mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.vscanf$MH, "vscanf");
    }

    public static int vscanf(Addressable __format, Addressable __arg) {
        var mh$ = vscanf$MH();
        try {
            return (int) mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.vsscanf$MH, "vsscanf");
    }

    public static int vsscanf(Addressable __s, Addressable __format, Addressable __arg) {
        var mh$ = vsscanf$MH();
        try {
            return (int) mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$6.fgetc$MH, "fgetc");
    }

    public static int fgetc(Addressable __stream) {
        var mh$ = fgetc$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$6.getc$MH, "getc");
    }

    public static int getc(Addressable __stream) {
        var mh$ = getc$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$6.getchar$MH, "getchar");
    }

    public static int getchar() {
        var mh$ = getchar$MH();
        try {
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$6.getc_unlocked$MH, "getc_unlocked");
    }

    public static int getc_unlocked(Addressable __stream) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getchar_unlocked$MH, "getchar_unlocked");
    }

    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fgetc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$7.fgetc_unlocked$MH, "fgetc_unlocked");
    }

    public static int fgetc_unlocked(Addressable __stream) {
        var mh$ = fgetc_unlocked$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.fputc$MH, "fputc");
    }

    public static int fputc(int __c, Addressable __stream) {
        var mh$ = fputc$MH();
        try {
            return (int) mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.putc$MH, "putc");
    }

    public static int putc(int __c, Addressable __stream) {
        var mh$ = putc$MH();
        try {
            return (int) mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$7.putchar$MH, "putchar");
    }

    public static int putchar(int __c) {
        var mh$ = putchar$MH();
        try {
            return (int) mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fputc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$7.fputc_unlocked$MH, "fputc_unlocked");
    }

    public static int fputc_unlocked(int __c, Addressable __stream) {
        var mh$ = fputc_unlocked$MH();
        try {
            return (int) mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$8.putc_unlocked$MH, "putc_unlocked");
    }

    public static int putc_unlocked(int __c, Addressable __stream) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int) mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$8.putchar_unlocked$MH, "putchar_unlocked");
    }

    public static int putchar_unlocked(int __c) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int) mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$8.getw$MH, "getw");
    }

    public static int getw(Addressable __stream) {
        var mh$ = getw$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$8.putw$MH, "putw");
    }

    public static int putw(int __w, Addressable __stream) {
        var mh$ = putw$MH();
        try {
            return (int) mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fgets$MH, "fgets");
    }

    public static MemoryAddress fgets(Addressable __s, int __n, Addressable __stream) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__getdelim$MH, "__getdelim");
    }

    public static long __getdelim(Addressable __lineptr, Addressable __n, int __delimiter, Addressable __stream) {
        var mh$ = __getdelim$MH();
        try {
            return (long) mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$9.getdelim$MH, "getdelim");
    }

    public static long getdelim(Addressable __lineptr, Addressable __n, int __delimiter, Addressable __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long) mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$9.getline$MH, "getline");
    }

    public static long getline(Addressable __lineptr, Addressable __n, Addressable __stream) {
        var mh$ = getline$MH();
        try {
            return (long) mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fputs$MH, "fputs");
    }

    public static int fputs(Addressable __s, Addressable __stream) {
        var mh$ = fputs$MH();
        try {
            return (int) mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$9.puts$MH, "puts");
    }

    public static int puts(Addressable __s) {
        var mh$ = puts$MH();
        try {
            return (int) mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.ungetc$MH, "ungetc");
    }

    public static int ungetc(int __c, Addressable __stream) {
        var mh$ = ungetc$MH();
        try {
            return (int) mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fread$MH, "fread");
    }

    public static long fread(Addressable __ptr, long __size, long __n, Addressable __stream) {
        var mh$ = fread$MH();
        try {
            return (long) mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fwrite$MH, "fwrite");
    }

    public static long fwrite(Addressable __ptr, long __size, long __n, Addressable __s) {
        var mh$ = fwrite$MH();
        try {
            return (long) mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fread_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fread_unlocked$MH, "fread_unlocked");
    }

    public static long fread_unlocked(Addressable __ptr, long __size, long __n, Addressable __stream) {
        var mh$ = fread_unlocked$MH();
        try {
            return (long) mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fwrite_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fwrite_unlocked$MH, "fwrite_unlocked");
    }

    public static long fwrite_unlocked(Addressable __ptr, long __size, long __n, Addressable __stream) {
        var mh$ = fwrite_unlocked$MH();
        try {
            return (long) mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fseek$MH, "fseek");
    }

    public static int fseek(Addressable __stream, long __off, int __whence) {
        var mh$ = fseek$MH();
        try {
            return (int) mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ftell$MH, "ftell");
    }

    public static long ftell(Addressable __stream) {
        var mh$ = ftell$MH();
        try {
            return (long) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$10.rewind$MH, "rewind");
    }

    public static void rewind(Addressable __stream) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fseeko$MH, "fseeko");
    }

    public static int fseeko(Addressable __stream, long __off, int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int) mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ftello$MH, "ftello");
    }

    public static long ftello(Addressable __stream) {
        var mh$ = ftello$MH();
        try {
            return (long) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fgetpos$MH, "fgetpos");
    }

    public static int fgetpos(Addressable __stream, Addressable __pos) {
        var mh$ = fgetpos$MH();
        try {
            return (int) mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fsetpos$MH, "fsetpos");
    }

    public static int fsetpos(Addressable __stream, Addressable __pos) {
        var mh$ = fsetpos$MH();
        try {
            return (int) mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$11.clearerr$MH, "clearerr");
    }

    public static void clearerr(Addressable __stream) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$11.feof$MH, "feof");
    }

    public static int feof(Addressable __stream) {
        var mh$ = feof$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ferror$MH, "ferror");
    }

    public static int ferror(Addressable __stream) {
        var mh$ = ferror$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$12.clearerr_unlocked$MH, "clearerr_unlocked");
    }

    public static void clearerr_unlocked(Addressable __stream) {
        var mh$ = clearerr_unlocked$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$12.feof_unlocked$MH, "feof_unlocked");
    }

    public static int feof_unlocked(Addressable __stream) {
        var mh$ = feof_unlocked$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ferror_unlocked$MH, "ferror_unlocked");
    }

    public static int ferror_unlocked(Addressable __stream) {
        var mh$ = ferror_unlocked$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$12.perror$MH, "perror");
    }

    public static void perror(Addressable __s) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MemoryLayout sys_nerr$LAYOUT() {
        return constants$12.sys_nerr$LAYOUT;
    }

    public static VarHandle sys_nerr$VH() {
        return constants$12.sys_nerr$VH;
    }

    public static MemorySegment sys_nerr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$12.sys_nerr$SEGMENT, "sys_nerr");
    }

    public static int sys_nerr$get() {
        return (int) constants$12.sys_nerr$VH.get(RuntimeHelper.requireNonNull(constants$12.sys_nerr$SEGMENT, "sys_nerr"));
    }

    public static void sys_nerr$set(int x) {
        constants$12.sys_nerr$VH.set(RuntimeHelper.requireNonNull(constants$12.sys_nerr$SEGMENT, "sys_nerr"), x);
    }

    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fileno$MH, "fileno");
    }

    public static int fileno(Addressable __stream) {
        var mh$ = fileno$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fileno_unlocked$MH, "fileno_unlocked");
    }

    public static int fileno_unlocked(Addressable __stream) {
        var mh$ = fileno_unlocked$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$13.popen$MH, "popen");
    }

    public static MemoryAddress popen(Addressable __command, Addressable __modes) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$13.pclose$MH, "pclose");
    }

    public static int pclose(Addressable __stream) {
        var mh$ = pclose$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$13.ctermid$MH, "ctermid");
    }

    public static MemoryAddress ctermid(Addressable __s) {
        var mh$ = ctermid$MH();
        try {
            return (java.lang.foreign.MemoryAddress) mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$14.flockfile$MH, "flockfile");
    }

    public static void flockfile(Addressable __stream) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ftrylockfile$MH, "ftrylockfile");
    }

    public static int ftrylockfile(Addressable __stream) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int) mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$14.funlockfile$MH, "funlockfile");
    }

    public static void funlockfile(Addressable __stream) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __uflow$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__uflow$MH, "__uflow");
    }

    public static int __uflow(Addressable x0) {
        var mh$ = __uflow$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__overflow$MH, "__overflow");
    }

    public static int __overflow(Addressable x0, int x1) {
        var mh$ = __overflow$MH();
        try {
            return (int) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }

    public static long __STDC_ISO_10646__() {
        return 201706L;
    }

    public static MemoryAddress NULL() {
        return constants$14.NULL$ADDR;
    }

    public static int __TIMESIZE() {
        return (int) 64L;
    }

    public static int EOF() {
        return (int) -1L;
    }

    public static MemorySegment P_tmpdir() {
        return constants$15.P_tmpdir$SEGMENT;
    }
}


