// Generated by jextract
package top.dreamlike.nativeLib.liburing;


import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

public class io_uring_buf {

    static final GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("addr"),
            Constants$root.C_INT$LAYOUT.withName("len"),
            Constants$root.C_SHORT$LAYOUT.withName("bid"),
            Constants$root.C_SHORT$LAYOUT.withName("resv")
    ).withName("io_uring_buf");

    public static MemoryLayout $LAYOUT() {
        return io_uring_buf.$struct$LAYOUT;
    }

    static final VarHandle addr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("addr"));

    public static VarHandle addr$VH() {
        return io_uring_buf.addr$VH;
    }

    public static long addr$get(MemorySegment seg) {
        return (long) io_uring_buf.addr$VH.get(seg);
    }

    public static void addr$set(MemorySegment seg, long x) {
        io_uring_buf.addr$VH.set(seg, x);
    }

    public static long addr$get(MemorySegment seg, long index) {
        return (long) io_uring_buf.addr$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void addr$set(MemorySegment seg, long index, long x) {
        io_uring_buf.addr$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("len"));

    public static VarHandle len$VH() {
        return io_uring_buf.len$VH;
    }

    public static int len$get(MemorySegment seg) {
        return (int) io_uring_buf.len$VH.get(seg);
    }

    public static void len$set(MemorySegment seg, int x) {
        io_uring_buf.len$VH.set(seg, x);
    }

    public static int len$get(MemorySegment seg, long index) {
        return (int) io_uring_buf.len$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void len$set(MemorySegment seg, long index, int x) {
        io_uring_buf.len$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle bid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bid"));

    public static VarHandle bid$VH() {
        return io_uring_buf.bid$VH;
    }

    public static short bid$get(MemorySegment seg) {
        return (short) io_uring_buf.bid$VH.get(seg);
    }

    public static void bid$set(MemorySegment seg, short x) {
        io_uring_buf.bid$VH.set(seg, x);
    }

    public static short bid$get(MemorySegment seg, long index) {
        return (short) io_uring_buf.bid$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void bid$set(MemorySegment seg, long index, short x) {
        io_uring_buf.bid$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle resv$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("resv"));

    public static VarHandle resv$VH() {
        return io_uring_buf.resv$VH;
    }

    public static short resv$get(MemorySegment seg) {
        return (short) io_uring_buf.resv$VH.get(seg);
    }

    public static void resv$set(MemorySegment seg, short x) {
        io_uring_buf.resv$VH.set(seg, x);
    }

    public static short resv$get(MemorySegment seg, long index) {
        return (short) io_uring_buf.resv$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void resv$set(MemorySegment seg, long index, short x) {
        io_uring_buf.resv$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session);
    }
}


